/*
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
*/



class Solution {
    public int rob(int[] nums) {
        int i;
        int len=nums.length;
        if(len==1) return nums[0];  //if length is equal to 1 then no any below loop works ,so just return that..
        
        int prev1=0;  //basically it is prev of previous of nums[i]
        int curr1=0;  //and curr means previous of nums[i]
        
        for(i=0;i<len-1;i++){
            int temp1=curr1;  //store curr(prev) val to temp ,because it going to change under next step
            curr1=Math.max(curr1, prev1+nums[i]);
            prev1=temp1;
        }
        
        int prev2=0;  //basically it is prev of previous of nums[i]
        int curr2=0;  //and curr means previous of nums[i]
        
         for(i=1;i<len;i++){
            int temp2=curr2;
            curr2=Math.max(curr2, prev2+nums[i]);
            prev2=temp2;
        }
        
        if(curr1>curr2) return curr1;  //return whichever combination is higher
        return curr2;
        
    }
}
