//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//The core namespace implements the primitive concepts used in the fluent core language
namespace NSCore;

//<summary>The special concept which all values are instances of.</summary>
concept Any {
    method is[T](): Bool # any_istype
    method as[T](): T # any_as

    method tryAs[T](): T? # any_tryas
    method defaultAs[T](default: T): T # any_defaultas

    method isNone(): Bool # any_isnone
    method isSome(): Bool # any_issome
}

//<summary>Type for representing all non-none values.</summary>
concept Some provides Any {
}

//<summary>Type for representing the none-value.</summary>
concept Truthy provides Any {
    method boolean(): Bool # truthy_boolean
}

//<summary>Type for representing the none-value.</summary>
entity None provides Any, Truthy {
}

concept Parsable provides Some {
    abstract static tryParse(str: String): Some | None;
}

//<summary>Primitive boolean value.</summary>
entity Bool provides Some, Truthy, Parsable {
    override static tryParse(str: String): Bool | None # bool_tryparse
}

//<summary>Primitive integer value.</summary>
entity Int provides Some, Parsable {
    override static tryParse(str: String): Int | None # int_tryparse

    static max(v1: Int, v2: Int): Int # int_max
    static min(v1: Int, v2: Int): Int # int_min
}

//<summary>Primitive string value.</summary>
entity String[unique T] provides Some {
    method tryParseAs[unique U where Parsable](): U | None {
        return U::tryParse(this);
    }

    method parseAs[unique U where Parsable](): U {
        return U::tryParse(this)->as[U]();
    }

    method toUntyped(): String # string_tountyped

    method length(): Int # string_length

    method startsWith(str: String): Bool # string_startsWith
    method endsWith(str: String): Bool # string_endsWith
    method includes(str: String): Bool # string_includes

    method replace(str: String, with: String): String # string_replace
    method trim(): String # string_trim
    method split(token: String): List[String] # string_split

    // Useful string methods
    method reverse(): String # string_reverse
    method upperCase(): String # string_upperCase
    method lowerCase(): String # string_lowerCase

    static concat(...args: List[String]): String # string_concat

    //static interpolate(fmt: String, ...args: List[String]): String # string_interpolate
}

//<summary>Primitive GUID value.</summary>
entity GUID provides Some {
}

//<summary>Primitive float value.</summary>
entity Float provides Some, Parsable {
    override static tryParse(str: String): Float # float_tryparse

    const e: Float = '2.718281828459045'@Float;
    const pi: Float = '3.141592653589793'@Float;

    method isNan(): Bool # float_isnan
    method isInfinity(): Bool # float_isinfinity

    method negate(): Float # float_negate
    method square(): Float # float_square
    method sqrt(): Float # float_sqrt

    static add(...args: List[Float]): Float # float_add
    static sub(v1: Float, v2: Float): Float # float_sub
    static mult(...args: List[Float]): Float # float_mult
    static div(v1: Float, v2: Float): Float # float_div
}

//<summary>Math helpers</summary>
entity Math {
    static abs(n: Float): Float # math_abs
    static acos(x: Float): Float # math_acos
    static asin(x: Float): Float # math_asin
    static atan(x: Float): Float # math_atan
    static atan2(y: Float, x: Float): Float # math_atan2
    static ceil(n: Float): Float # math_ceil
    static cos(x: Float): Float # math_cos
    static floor(n: Float): Float # math_floor
    static log(n: Float): Float # math_log
    static pow(b: Float, e: Float): Float # math_pow
    static round(n: Float): Float # math_round
    static sin(x: Float): Float # math_sin
    static sqrt(x: Float): Float # math_sqrt
    static tan(x: Float): Float # math_tan
}

//<summary>Primitive regex value.</summary>
entity Regex provides Some, Parsable {
    override static tryParse(str: String): Regex # regex_tryparse

    method match(str: String, start?: Int, end?: Int): {start: Int, end: Int} | None # regex_match

    //
    //TODO: this is pretty boring right now
    //
}

//<summary>All actual tuples implicitly provide this concept.</summary>
concept Tuple provides Some {
}

//<summary>All actual records implicitly provide this concept.</summary>
concept Record provides Some {
}

//<summary>All actual functions implicitly provide this concept.</summary>
concept Function provides Some {
}

//<summary>All actual entities/concepts implicitly provide this concept.</summary>
concept Object provides Some {
}

//<summary>All actual enums implicitly provide this.</summary>
concept Enum provides Some {
}

//<summary>All actual custom keys implicitly provide this.</summary>
concept CustomKey provides Some {
}

//<summary>Types that can be used as equality based keys.</summary>
typedef KeyType = None | Bool | Int | String | GUID | Enum | Tuple | Record | CustomKey;

//<summary>Providing this concept allows for an entity to be compared or stored in a key based container using the key field.</summary>
concept Keyed[T where KeyType] provides Some {
    field key: T;
}

//<summary>Types that can be used in equality operations or in key based containers.</summary>
typedef Indexable = KeyType | Keyed[KeyType];

//<summary>A lightweight tagging class for values.</summary>
entity Tagged[T where KeyType, U] provides Some, Keyed[T] {
    field value: U;
}

//<summary>Shorthand for predicate function types.</summary>
typedef Predicate[T] = fn(_: T) -> Bool;

//<summary>Shorthand for transform function types.</summary>
typedef Transform[T, U] = fn(_: T) -> U;
